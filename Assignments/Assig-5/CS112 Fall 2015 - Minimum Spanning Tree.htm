<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">

<title>
CS112 Fall 2015 - Minimum Spanning Tree
</title>
<style>
body { font: 14px Trebuchet MS, Verdana, Arial, Helvetica, sans-serif; }
div.code { background: lightgrey; }
table { border-collapse: collapse; cellspacing: 0px; margin-left: 10%;}
th { font: bold 14px Trebuchet MS; border-bottom: 1px solid black; padding: 10px;}
td { padding-right: 20px; padding-top: 5px; font: 13px Trebuchet MS; }
.pts { text-align: left; padding-left: 10px;}
a, a:visited { color: blue; }
pre { color: blue; }
span.impl { color: red; }
tt, code { color: blue; }
</style>

</head><body><center>
<h2>Programming Assignment 5</h2>
<h2>Minimum Spanning Tree (MST)</h2>
<h3>Posted Wed, Nov 18</h3> 
<h3>Due Mon, Dec 7, 11:00 PM (WARNING!! NO GRACE PERIOD)</h3>
<h3>Extended deadline (with ONE time pass): Thu, Dec 10, 11:00 PM (NO GRACE PERIOD)
</h3><h3>Worth 75 points = 7.5% of your course grade</h3> 
</center>

<hr>
<p>In this assignment, you will implement Tarjan and Cheriton's round-robin algorithm for 
finding the minimum spanning tree of a weighted undirected graph.

</p><p><b>Note: This assignment also challenges you to (a) understand a non-trivial algorithm, and 
(b) match the algorithm to code. It may take a couple of readings of the entire algorithm 
description and the given code template before you see how all the pieces connect. </b>

</p><hr>

<p></p><p>You will work on this assignment individually.
Read <a href="http://www.cs.rutgers.edu/policies/academicintegrity/index.php?page=3">
DCS Academic Integrity Policy for Programming Assignments</a> - you are responsible for abiding 
by the policy. In particular, note that "<b>All Violations of the Academic Integrity Policy will 
be reported by the instructor to the appropriate Dean</b>".

</p><hr>

<h3>IMPORTANT - READ THE FOLLOWING CAREFULLY!!!</h3>

<ul>
<li><font color="red">Assignments emailed to the instructor or TAs will
be ignored--they will NOT be accepted for grading. We will only grade submissions in 
Sakai.</font><br>
</li><li><font color="red">If your program does not compile, you will not get any credit.</font> 
</li></ul>

<p>Most compilation errors occur for two reasons: 
</p><ol>
<li> You 
are programming outside Eclipse, and you delete the "package" statement at the top of the file. 
If you do this, you are changing the program structure, and it will not compile when we
test it.
</li><li> You make some last minute 
changes, and submit without compiling. 
</li></ol>

<h3>To avoid these issues, (a) START EARLY, and
give yourself plenty of time to work through the assignment, and (b) Submit a version well
before the deadline so there is at least something in Sakai for us to grade. And you can
keep submitting later versions (up to 10) - we will 
accept the LATEST version.</h3>

<b>A separate Sakai assignment will be opened for extensions AFTER the deadline for the regular 
submission has passed.</b>


<p></p><hr>

<ul>
<li><a href="#mst">Minimum Spanning Tree</a>
</li><li><a href="#mstalgo">Round-robin MST Algorithm</a>
</li><li><a href="#impl">Implementation</a>
</li><li><a href="#testing">Running the Program</a>
</li><li><a href="#submission">Submission</a>
</li></ul>

<hr>
<a name="mst"></a><h3>Minimum Spanning Tree</h3>
Several real-world problems
need to find a so-called <b>minimum spanning tree</b> (MST) in an undirected graph 
with positive edge weights.  <p>

In an undirected graph, any subset of the vertices and edges that does not contain any cycles is a
<i>tree</i>.  A <i>spanning tree</i> is a tree which connects every vertex of the graph.
If the graph has weighted edges, a <i>minimum spanning tree</i> is one for which the
sum of the weights of the tree edges is minimized, i.e. the edge weights sum is less
than that for any other spanning tree.</p><p>

</p><p>The following is an example of weighted undirected graph, stored in file
<a href="http://www.cs.rutgers.edu/courses/112/classes/fall_2015_venugopal/progs/prog5/graph1.txt">graph1.txt</a>

</p><p style="margin-left: 100px;"><img src="CS112%20Fall%202015%20-%20Minimum%20Spanning%20Tree_files/graph1.png">

</p><p>Here are two spanning trees that can be derived from this graph:
<table>
<tbody><tr>
<td>
<img src="CS112%20Fall%202015%20-%20Minimum%20Spanning%20Tree_files/graph1sp1.png">
<p>
The sum of the edge weights for this spanning tree is 54&nbsp;&nbsp;&nbsp;
</p></td>
<td>
<img src="CS112%20Fall%202015%20-%20Minimum%20Spanning%20Tree_files/graph1sp2.png">
<p>The sum of the edge weights for this spanning tree is 37
</p></td>
</tr>
</tbody></table>

</p><hr>

<a name="mstalgo"></a><h3>Round-robin MST Algorithm</h3>
A <i>partial spanning tree</i> is a tree that spans only a subset of a graph (only some of
the vertices in the graph are connected by the partial tree).  In Tarjan and Cheriton's <i>round-robin algorithm</i>, partial trees are built and combined
until only one remains: the MST of the entire graph.

<p>Following is the algorithm, which is illustrated using this graph, stored in file
<a href="http://www.cs.rutgers.edu/courses/112/classes/fall_2015_venugopal/progs/prog5/graph2.txt">graph2.txt</a>

</p><p style="margin-left: 100px;"><img src="CS112%20Fall%202015%20-%20Minimum%20Spanning%20Tree_files/graph2.png">

</p><p>There are 9 steps in the following algorithm, followed by some notes. Read the whole
thing (all steps plus notes) at least *twice*.

</p><ol>
  <li>Create an empty list L of partial trees.

<p> </p></li><li>Separately for each vertex v in the graph:
      <ol>
        <li>Create a partial tree T containing only v.
        </li><li>Mark v as belonging to T.
        </li><li>Create a priority queue (heap) P and associate it with T.
        </li><li>Insert all of the arcs (edges) connected to v into P.  <b><em>The lower the weight on an
            arc, the higher its priority.</em></b>
        </li><li>Add the partial tree T to the list L.
      </li></ol>

<p>We will represent a partial tree like this:

</p><pre>Vertices: [list of vertices, root first]  PQ: [arcs in priority order]
</pre>
<p>At the end of step 2, we have the following list of partial trees:
</p><pre>T1. Vertices: A  PQ: (A C 1), (A D 3), (A B 4)
T2. Vertices: B  PQ: (B D 3), (B A 4), (B C 5)
T3. Vertices: C  PQ: (C A 1), (C E 2), (C D 4), (C B 5)
T4. Vertices: D  PQ: (D E 1), (D A 3), (D B 3), (D C 4)
T5. Vertices: E  PQ: (E D 1), (E C 2)
</pre>
(Note that the <tt>PQ</tt> representation above lists arcs in a sorted order,
ONLY to show that that if the arcs were to be removed one at a time, they would 
follow the listed order. The actual ordering of arcs in the heap will be different. Also,
the ordering of trees in a list is arbitrary.)

<p>  </p></li><li>Remove the first partial tree PTX from L.  Let PQX be PTX's priority queue.

<pre>   T1. Vertices: A  P1: (A C 1), (A D 3), (A B 4)
</pre>

<p>  </p></li><li>Remove the highest-priority arc from PQX. Say this arc is &#945;.
Let v1 and v2 be the two vertices
      connected by &#945;, where v1 belongs to PTX.
<pre>   &#945;: (A C 1)    v1: A   v2: C
</pre>

<p>  </p></li><li>If v2 also belongs to PTX, go back to Step 4, otherwise continue to the
next step.

<pre>   C belongs to a different tree (T3) than A, continue to the next step
</pre>

<p>  </p></li><li>Report &#945; - this is a component of the minimum spanning tree.

<pre>   (A C 1) is a component of the MST
</pre>

<p>  </p></li><li>Find the partial tree PTY to which v2 belongs.  Remove PTY from the list L.  
Let PQY be PTY's priority queue.

<pre>   T3. Vertices: C  PQ: (C A 1), (C E 2), (C D 4), (C B 5)
</pre>

<p>  </p></li><li>Combine PTX and PTY. This includes merging the priority queues PQX and PQY into
a single priority queue. Append 
the resulting tree back to the end of L.

<pre> T2. Vertices: B    PQ: (B D 3), (B A 4), (B C 5)
 T4. Vertices: D    PQ: (D E 1), (D A 3), (D B 3), (D C 4)
 T5. Vertices: E    PQ: (E D 1), (E C 2)
T13. Vertices: A C  PQ: (C A 1), (C E 2), (A D 3), (A B 4), (C D 4), (C B 5)
</pre>

<p>  </p></li><li>If there is still more than one tree in L, go to Step 3.
</li></ol>

<p>Notes:
</p><ul>
<li>Arc (x y) is the same as arc (y x).
<p></p></li><li>A partial tree is labeled (identified) by its "root" vertex.  This vertex is not really
special - it is simply the first vertex that was added to the tree.  We can use
this label to tell whether or not two given vertices belong to the same tree.

</li><li><p>Each vertex keeps a pointer to its "parent" in the partial tree.  The parent is just some 
other
vertex in the tree - there isn't necessarily an edge connecting a vertex to its parent.
From a given vertex, we can
follow these pointers to the root of the partial tree to which the vertex belongs.  If two
vertices have the same root they are already in the same tree, and if they have different
roots they are in different trees.

</p></li><li><p>When merging one partial tree (say PTY) into another (say PTX), we have to change
the root of all of PTY's vertices to the root of PTX.  We can do this easily by
setting the parent pointer of the root of PTY to point to the root of PTX: any vertex
which used to be in PTY will now have PTX's root as its root.
</p></li></ul>

<p></p><p>Continuing to trace the algorithm on the example, after the first iteration there
are still four partial trees in the list. So we repeat the process from Step 3 on.
The next partial tree to be removed is <tt>T2</tt>, and its highest-priority incident arc is
<tt>(B D 3)</tt>. Since <tt>D</tt> is in a different partial tree (<tt>T4</tt>) than 
<tt>T2</tt>, the partial trees <tt>T2</tt> and <tt>T4</tt> are combined, and the
list is updated to the following:

</p><pre>      T5. Vertices: E    PQ: (E D 1), (E C 2)
     T13. Vertices: A C  PQ: (C A 1), (C E 2), (A D 3), (A B 4), (C D 4), (C B 5)
     T24. Vertices: B D  PQ: (D E 1), (D A 3), (D B 3), (B A 4), (D C 4), (B C 5)
</pre>

Repeating again, the next partial tree to be removed is <tt>T5</tt>, and its
highest-priority incident arc is <tt>(E D 1)</tt>. 
Since <tt>D</tt> is in a different partial tree (<tt>T24</tt>) than 
<tt>T5</tt>, the partial trees <tt>T5</tt> and <tt>T24</tt> are combined, and the
list is updated to the following:

<pre>      T13. Vertices: A C    PQ: (C A 1), (C E 2), (A D 3), (A B 4), (C D 4), (C B 5)
     T524. Vertices: E B D  PQ: (D E 1), (E C 2), (D A 3), (D B 3), (B A 4), (D C 4), (B C 5)
</pre>
Repeating again, the next partial tree to be removed is <tt>T13</tt>, and its
highest-priority incident arc is <tt>(C A 1)</tt>.  However, 
<tt>C</tt> and <tt>A</tt> belong to the same
partial tree, we discard this arc (Step 5) and return to Step 4, to pick the next
highest priority arc. This is <tt>(C E 2)</tt>. 
Since <tt>E</tt> is in a different partial tree (<tt>T524</tt>) than 
<tt>T13</tt>, the partial trees <tt>T13</tt> and <tt>T524</tt> are combined, and the
list is updated to the following:

<pre>   T13524. Vertices: A C E B D  PQ: (D E 1), (E C 2), (A D 3), (D A 3), (D B 3), (A B 4), (C D 4), (B A 4), (D C 4), (C B 5), (B C 5)
</pre>
Now that there is only one tree left, we are done.  The set of arcs we used to
combine the partial trees is the MST of the graph:
<p>
<table>
<tbody><tr>
<td>
<pre>A C 1
B D 3
E D 1
C E 2
</pre>
</td>
<td>
<img src="CS112%20Fall%202015%20-%20Minimum%20Spanning%20Tree_files/graph2mst.png">
</td>
</tr>
</tbody></table>

</p><hr>

<a name="impl"></a><h3>Implementation</h3>

<p>Download the attached <tt>mst_project.zip</tt> file to your
computer. DO NOT unzip it. Instead, follow the instructions on the Eclipse page 
under the section "Importing a Zipped Project into Eclipse" to get the entire
project into your Eclipse workspace.

</p><p>You will see a project called <tt>MST</tt> with the following classes:

</p><ul>
<li><tt>structures.Vertex</tt> (with inner class <tt>Neighbor</tt>)
</li><li><tt>structures.Graph</tt>
</li><li><tt>structures.MinHeap</tt>
</li><li><tt>apps.PartialTree</tt> (with inner class <tt>Arc</tt>)
</li><li><tt>apps.PartialTreeList</tt>
</li><li><tt>apps.MST</tt>
</li></ul>

<p>The project also includes the <tt>graph1.txt</tt> and <tt>graph2.txt</tt> files
used in the description of the algorithm in the <b>Minimum Spanning Tree</b> section.

</p><p>Fill in the following methods where indicated in the <tt>PartialTreeList.java</tt> and
<tt>MST.java</tt> files:
<br>&nbsp;<br>
<table>
<tbody><tr><th>Method</th><th class="pts">Points</th></tr>
<tr><td><tt>MST: initialize</tt></td><td class="pts">20</td></tr>
<tr><td><tt>PartialTreeList: remove</tt></td><td class="pts">10</td></tr>
<tr><td><tt>PartialTreeList: removeTreeContaining</tt></td><td class="pts">25</td></tr>
<tr><td><tt>MST: execute</tt></td><td class="pts">20</td></tr>

</tbody></table>

</p><p>The ONLY changes you <b>are allowed</b> to make in any of the given files are the
following:
</p><ul>
<li>Fill in the implementations of the required methods.
</li><li>Add <b>private</b> helper methods in the <tt>PartialTreeList</tt> and
<tt>MST</tt> classes.
</li></ul>


<hr>
<a name="testing"></a><h3>Running the Program</h3>

<p>You need to write your own driver program to create a <tt>Graph</tt> object
from an input graph file, and call the <tt>MST</tt> methods to run the
algorithm on this graph.

</p><p>For all the
test cases you build, create test files like <tt>graph2.txt</tt> and place
them in the same folder as <tt>graph2.txt</tt>

</p><hr>

<a name="submit"></a><h3>Submission</h3>

<p>Zip your <tt>PartialTreeList.java</tt> and
<tt>MST.java</tt> files 
into <tt>mst.zip</tt> and submit this zip file.

</p><p><font color="red">DO NOT zip the entire Eclipse project. Also, make sure there are
no folders in your zipped file. (Do not follow the instructions in the Eclipse page
for zipping up a project, or zipping up source files - these will include the directory
structure, which you don't want.)</font> 

</p><p>The easiest and safest thing to do is copy
<tt>PartialTreeList.java</tt> and <tt>MST.java</tt> from your
workspace to a different location on your computer, then zip them. And
before you submit, verify the contents of <tt>mst.zip</tt> - if it
does not have these files, or if these files are under a folder, you
will lose points. If you are still not sure about this, ask your TA.

</p>
</body></html>